DROP TABLE IF EXISTS req CASCADE;
DROP TABLE IF EXISTS FinalSchedule CASCADE;
DROP TABLE IF EXISTS Locations CASCADE;
DROP TABLE IF EXISTS Times CASCADE;
DROP TABLE IF EXISTS Perms CASCADE;
DROP TABLE IF EXISTS maker CASCADE;

CREATE TABLE maker (
 id SERIAL PRIMARY KEY,
 username TEXT UNIQUE NOT NULL,
 password TEXT NOT NULL,
 firstName TEXT NOT NULL,
 lastName TEXT NOT NULL,
 email TEXT NOT NULL,
 isAdmin BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE req (
 id SERIAL PRIMARY KEY,
 maker_id INTEGER NOT NULL,
 created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 req_date TEXT NOT NULL,
 req_time TEXT NOT NULL,
 location TEXT NOT NULL,
 priority INTEGER NOT NULL,
 capacity INTEGER NOT NULL,
 FOREIGN KEY (maker_id) REFERENCES maker (id)
);

CREATE TABLE FinalSchedule (
 id SERIAL PRIMARY KEY,
 maker_id INTEGER NOT NULL,
 req_date TEXT NOT NULL,
 firstName TEXT NOT NULL,
 lastName TEXT NOT NULL,
 capacity INTEGER NOT NULL,
 location TEXT NOT NULL,
 req_time TEXT NOT NULL,
 FOREIGN KEY (maker_id) REFERENCES maker (id)
);

CREATE TABLE Locations (
 locationId SERIAL PRIMARY KEY,
 locationName TEXT NOT NULL,
 locationCapacity INTEGER NOT NULL
);

CREATE TABLE Times (
 id SERIAL PRIMARY KEY,
 locationId INTEGER NOT NULL,
 locationName TEXT NOT NULL,
 locationCapacity INTEGER NOT NULL,
 FOREIGN KEY (locationId) REFERENCES Locations (locationId)
);

CREATE TABLE Perms (
 id SERIAL PRIMARY KEY,
 isAdmin BOOLEAN NOT NULL DEFAULT FALSE,
 p1NumReq INTEGER NOT NULL,
 p2NumReq INTEGER NOT NULL
);
